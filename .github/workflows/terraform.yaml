# This is a basic workflow to help you get started with Actions

name: TTS Converter app github actions pipeline

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  # Two options that we can run with this workflow: apply and destroy
  workflow_dispatch:
    inputs:
      terraform_action:
        type: choice
        description: Select terraform action
        options:
        - apply
        - destroy
        required: true
jobs:
  terraform:
    name: 'Terraform'
    env:
      # AWS secrets
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY }}

    runs-on: ubuntu-latest

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
       
    # Install the latest version of Terraform CLI 
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan 

    # On push to "main", build or change infrastructure according to Terraform configuration files
    # Executed only if you choose the input option = apply
    - name: Terraform Apply
      if: ${{ github.event.inputs.terraform_action == 'apply' }}
      run: terraform apply -auto-approve 

    # I add this option to have always the possibility to delete resources automatically after test
    # Executed only if you choose the input option = destroy 
    - name: Terraform destroy
      if: ${{ github.event.inputs.terraform_action == 'destroy' }}
      run: terraform destroy -auto-approve 